#include <iostream>
#include <vector>
#include <string>
#include <cmath>
using namespace std;
int p, q;
int e, d;
long long n, phi;
vector<int>prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,
 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
 int prime(int a)
{
    for (int i = 2; i < sqrt(a); i++)
    {
        if (a % i == 0)
        {
            return 0;
            
        }
        
    }
    
}
long long binpow(long long a, int power, int mod)
{
    if (power == 0)
    {
        return 1;
        
    }
    if (power % 2 == 1)
    {
        return binpow(a, power - 1, mod) * 1LL * a % mod;
        
    }
    else
    {
        long long b = binpow (a, power / 2, mod) % mod;
        return b * 1LL * b % mod;
        
    }
    
}
void keys()
{
    {
        p = 10000 + rand() % 90000;
        q = 10000 + rand() % 90000;
        
    }
    while (!prime(p) && !prime(q));
    n = p * q;
    phi = (p - 1) * (q - 1);
    for (int i = 1; i < prime_numbers.size(); i++)
    {
        if (phi % prime_numbers[i] != 0)
        {
            e = prime_numbers[i];
            break;
            
        }
        
    }
    d = 2;
    while((d * 1LL * e % phi) != 1)
    {
        ++d;
        
    }
}
vector<long long> cyphered;
void encrypt(int a)
{
    cyphered.push_back(binpow(a, e, n));
}
string message;
void decoder()
{
    for (int i = 0; i < cyphered.size(); ++i)
    {
        message.push_back((char)binpow(cyphered[i], d, n));
        
    }
    
}
int main()
{
    string s;
    cin >> s;
    keys();
    for(int i = 0; i < s.length(); ++i)
    {
        encrypt((int)s[i]);
        
    }
    for(int i = 0; i < s.length(); ++i)
    {
        cout << cyphered[i] << " ";
        
    }
    cout << endl;
    decoder();
    cout << message;
    return 0;
}
